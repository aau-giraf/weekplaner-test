/* 
 * The Giraf REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Allows retrieval of user icon by anyone since an usericon should be public
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResponseImageDTO</returns>
        ResponseImageDTO V1UserByIdIconGet (string id);

        /// <summary>
        /// Allows retrieval of user icon by anyone since an usericon should be public
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResponseImageDTO</returns>
        ApiResponse<ResponseImageDTO> V1UserByIdIconGetWithHttpInfo (string id);
        /// <summary>
        /// Allows retrieval of user icon by anyone since an usericon should be public
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void V1UserByIdIconRawGet (string id);

        /// <summary>
        /// Allows retrieval of user icon by anyone since an usericon should be public
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1UserByIdIconRawGetWithHttpInfo (string id);
        /// <summary>
        /// Updates the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier.</param>
        /// <param name="username">Username. (optional)</param>
        /// <param name="screenName">Screen name. (optional)</param>
        /// <returns>ResponseGirafUserDTO</returns>
        ResponseGirafUserDTO V1UserByIdPatch (string id, string username = null, string screenName = null);

        /// <summary>
        /// Updates the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier.</param>
        /// <param name="username">Username. (optional)</param>
        /// <param name="screenName">Screen name. (optional)</param>
        /// <returns>ApiResponse of ResponseGirafUserDTO</returns>
        ApiResponse<ResponseGirafUserDTO> V1UserByIdPatchWithHttpInfo (string id, string username = null, string screenName = null);
        /// <summary>
        /// Find information on the user with the username supplied as a url query parameter or the current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResponseSettingDTO</returns>
        ResponseSettingDTO V1UserByIdSettingsGet (string id);

        /// <summary>
        /// Find information on the user with the username supplied as a url query parameter or the current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResponseSettingDTO</returns>
        ApiResponse<ResponseSettingDTO> V1UserByIdSettingsGetWithHttpInfo (string id);
        /// <summary>
        /// Updates the user settings for a user with the given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options">Options. (optional)</param>
        /// <returns>ResponseSettingDTO</returns>
        ResponseSettingDTO V1UserByIdSettingsPatch (string id, SettingDTO options = null);

        /// <summary>
        /// Updates the user settings for a user with the given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options">Options. (optional)</param>
        /// <returns>ApiResponse of ResponseSettingDTO</returns>
        ApiResponse<ResponseSettingDTO> V1UserByIdSettingsPatchWithHttpInfo (string id, SettingDTO options = null);
        /// <summary>
        /// Gets the citizens for the specific user corresponding to the provided username.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>ResponseListUserNameDTO</returns>
        ResponseListUserNameDTO V1UserByUsernameCitizensGet (string username);

        /// <summary>
        /// Gets the citizens for the specific user corresponding to the provided username.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>ApiResponse of ResponseListUserNameDTO</returns>
        ApiResponse<ResponseListUserNameDTO> V1UserByUsernameCitizensGetWithHttpInfo (string username);
        /// <summary>
        /// Removes a user from its department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>ResponseDepartmentDTO</returns>
        ResponseDepartmentDTO V1UserByUsernameDepartmentDelete (string username);

        /// <summary>
        /// Removes a user from its department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        ApiResponse<ResponseDepartmentDTO> V1UserByUsernameDepartmentDeleteWithHttpInfo (string username);
        /// <summary>
        /// Find information on the user with the username supplied as a url query parameter or the current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>ResponseGirafUserDTO</returns>
        ResponseGirafUserDTO V1UserByUsernameGet (string username);

        /// <summary>
        /// Find information on the user with the username supplied as a url query parameter or the current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>ApiResponse of ResponseGirafUserDTO</returns>
        ApiResponse<ResponseGirafUserDTO> V1UserByUsernameGetWithHttpInfo (string username);
        /// <summary>
        /// Gets the guardians for the specific user corresponding to the provided username.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>ResponseListUserNameDTO</returns>
        ResponseListUserNameDTO V1UserByUsernameGuardiansGet (string username);

        /// <summary>
        /// Gets the guardians for the specific user corresponding to the provided username.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>ApiResponse of ResponseListUserNameDTO</returns>
        ApiResponse<ResponseListUserNameDTO> V1UserByUsernameGuardiansGetWithHttpInfo (string username);
        /// <summary>
        /// Adds a resource to the given user&#39;s list of resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="resourceIdDTO"> (optional)</param>
        /// <returns>ResponseGirafUserDTO</returns>
        ResponseGirafUserDTO V1UserByUsernameResourcePost (string username, ResourceIdDTO resourceIdDTO = null);

        /// <summary>
        /// Adds a resource to the given user&#39;s list of resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="resourceIdDTO"> (optional)</param>
        /// <returns>ApiResponse of ResponseGirafUserDTO</returns>
        ApiResponse<ResponseGirafUserDTO> V1UserByUsernameResourcePostWithHttpInfo (string username, ResourceIdDTO resourceIdDTO = null);
        /// <summary>
        /// Updates the display name of the current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The new display name of the user. (optional)</param>
        /// <returns>ResponseGirafUserDTO</returns>
        ResponseGirafUserDTO V1UserDisplayNamePut (string displayName = null);

        /// <summary>
        /// Updates the display name of the current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The new display name of the user. (optional)</param>
        /// <returns>ApiResponse of ResponseGirafUserDTO</returns>
        ApiResponse<ResponseGirafUserDTO> V1UserDisplayNamePutWithHttpInfo (string displayName = null);
        /// <summary>
        /// Get information about the logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseGirafUserDTO</returns>
        ResponseGirafUserDTO V1UserGet ();

        /// <summary>
        /// Get information about the logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseGirafUserDTO</returns>
        ApiResponse<ResponseGirafUserDTO> V1UserGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guardianId"></param>
        /// <param name="citizenId"></param>
        /// <returns>ResponseGirafUserDTO</returns>
        ResponseGirafUserDTO V1UserGuardianByGuardianIdCitizenByCitizenIdPost (string guardianId, string citizenId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guardianId"></param>
        /// <param name="citizenId"></param>
        /// <returns>ApiResponse of ResponseGirafUserDTO</returns>
        ApiResponse<ResponseGirafUserDTO> V1UserGuardianByGuardianIdCitizenByCitizenIdPostWithHttpInfo (string guardianId, string citizenId);
        /// <summary>
        /// Allows the user to delete his profile icon.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Response</returns>
        Response V1UserIconDelete ();

        /// <summary>
        /// Allows the user to delete his profile icon.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> V1UserIconDeleteWithHttpInfo ();
        /// <summary>
        /// Allows the user to update his profile icon.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Response</returns>
        Response V1UserIconPut ();

        /// <summary>
        /// Allows the user to update his profile icon.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> V1UserIconPutWithHttpInfo ();
        /// <summary>
        /// Updates username and screenname for the current authenticated user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="screenName"> (optional)</param>
        /// <returns>ResponseGirafUserDTO</returns>
        ResponseGirafUserDTO V1UserPatch (string username = null, string screenName = null);

        /// <summary>
        /// Updates username and screenname for the current authenticated user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="screenName"> (optional)</param>
        /// <returns>ApiResponse of ResponseGirafUserDTO</returns>
        ApiResponse<ResponseGirafUserDTO> V1UserPatchWithHttpInfo (string username = null, string screenName = null);
        /// <summary>
        /// Deletes a resource with the specified id from the given user&#39;s list of resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceIdDTO"> (optional)</param>
        /// <returns>ResponseGirafUserDTO</returns>
        ResponseGirafUserDTO V1UserResourceDelete (ResourceIdDTO resourceIdDTO = null);

        /// <summary>
        /// Deletes a resource with the specified id from the given user&#39;s list of resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceIdDTO"> (optional)</param>
        /// <returns>ApiResponse of ResponseGirafUserDTO</returns>
        ApiResponse<ResponseGirafUserDTO> V1UserResourceDeleteWithHttpInfo (ResourceIdDTO resourceIdDTO = null);
        /// <summary>
        /// Read the currently authorized user&#39;s settings object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseSettingDTO</returns>
        ResponseSettingDTO V1UserSettingsGet ();

        /// <summary>
        /// Read the currently authorized user&#39;s settings object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseSettingDTO</returns>
        ApiResponse<ResponseSettingDTO> V1UserSettingsGetWithHttpInfo ();
        /// <summary>
        /// Updates the currently authenticated user settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options. (optional)</param>
        /// <returns>ResponseSettingDTO</returns>
        ResponseSettingDTO V1UserSettingsPatch (SettingDTO options = null);

        /// <summary>
        /// Updates the currently authenticated user settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options. (optional)</param>
        /// <returns>ApiResponse of ResponseSettingDTO</returns>
        ApiResponse<ResponseSettingDTO> V1UserSettingsPatchWithHttpInfo (SettingDTO options = null);
        /// <summary>
        /// Returns currently logged in users username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseString</returns>
        ResponseString V1UserUsernameGet ();

        /// <summary>
        /// Returns currently logged in users username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseString</returns>
        ApiResponse<ResponseString> V1UserUsernameGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Allows retrieval of user icon by anyone since an usericon should be public
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResponseImageDTO</returns>
        System.Threading.Tasks.Task<ResponseImageDTO> V1UserByIdIconGetAsync (string id);

        /// <summary>
        /// Allows retrieval of user icon by anyone since an usericon should be public
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResponseImageDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseImageDTO>> V1UserByIdIconGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Allows retrieval of user icon by anyone since an usericon should be public
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1UserByIdIconRawGetAsync (string id);

        /// <summary>
        /// Allows retrieval of user icon by anyone since an usericon should be public
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1UserByIdIconRawGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Updates the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier.</param>
        /// <param name="username">Username. (optional)</param>
        /// <param name="screenName">Screen name. (optional)</param>
        /// <returns>Task of ResponseGirafUserDTO</returns>
        System.Threading.Tasks.Task<ResponseGirafUserDTO> V1UserByIdPatchAsync (string id, string username = null, string screenName = null);

        /// <summary>
        /// Updates the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier.</param>
        /// <param name="username">Username. (optional)</param>
        /// <param name="screenName">Screen name. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGirafUserDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGirafUserDTO>> V1UserByIdPatchAsyncWithHttpInfo (string id, string username = null, string screenName = null);
        /// <summary>
        /// Find information on the user with the username supplied as a url query parameter or the current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResponseSettingDTO</returns>
        System.Threading.Tasks.Task<ResponseSettingDTO> V1UserByIdSettingsGetAsync (string id);

        /// <summary>
        /// Find information on the user with the username supplied as a url query parameter or the current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResponseSettingDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSettingDTO>> V1UserByIdSettingsGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Updates the user settings for a user with the given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options">Options. (optional)</param>
        /// <returns>Task of ResponseSettingDTO</returns>
        System.Threading.Tasks.Task<ResponseSettingDTO> V1UserByIdSettingsPatchAsync (string id, SettingDTO options = null);

        /// <summary>
        /// Updates the user settings for a user with the given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options">Options. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSettingDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSettingDTO>> V1UserByIdSettingsPatchAsyncWithHttpInfo (string id, SettingDTO options = null);
        /// <summary>
        /// Gets the citizens for the specific user corresponding to the provided username.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>Task of ResponseListUserNameDTO</returns>
        System.Threading.Tasks.Task<ResponseListUserNameDTO> V1UserByUsernameCitizensGetAsync (string username);

        /// <summary>
        /// Gets the citizens for the specific user corresponding to the provided username.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>Task of ApiResponse (ResponseListUserNameDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseListUserNameDTO>> V1UserByUsernameCitizensGetAsyncWithHttpInfo (string username);
        /// <summary>
        /// Removes a user from its department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        System.Threading.Tasks.Task<ResponseDepartmentDTO> V1UserByUsernameDepartmentDeleteAsync (string username);

        /// <summary>
        /// Removes a user from its department.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1UserByUsernameDepartmentDeleteAsyncWithHttpInfo (string username);
        /// <summary>
        /// Find information on the user with the username supplied as a url query parameter or the current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>Task of ResponseGirafUserDTO</returns>
        System.Threading.Tasks.Task<ResponseGirafUserDTO> V1UserByUsernameGetAsync (string username);

        /// <summary>
        /// Find information on the user with the username supplied as a url query parameter or the current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>Task of ApiResponse (ResponseGirafUserDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGirafUserDTO>> V1UserByUsernameGetAsyncWithHttpInfo (string username);
        /// <summary>
        /// Gets the guardians for the specific user corresponding to the provided username.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>Task of ResponseListUserNameDTO</returns>
        System.Threading.Tasks.Task<ResponseListUserNameDTO> V1UserByUsernameGuardiansGetAsync (string username);

        /// <summary>
        /// Gets the guardians for the specific user corresponding to the provided username.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>Task of ApiResponse (ResponseListUserNameDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseListUserNameDTO>> V1UserByUsernameGuardiansGetAsyncWithHttpInfo (string username);
        /// <summary>
        /// Adds a resource to the given user&#39;s list of resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="resourceIdDTO"> (optional)</param>
        /// <returns>Task of ResponseGirafUserDTO</returns>
        System.Threading.Tasks.Task<ResponseGirafUserDTO> V1UserByUsernameResourcePostAsync (string username, ResourceIdDTO resourceIdDTO = null);

        /// <summary>
        /// Adds a resource to the given user&#39;s list of resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="resourceIdDTO"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGirafUserDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGirafUserDTO>> V1UserByUsernameResourcePostAsyncWithHttpInfo (string username, ResourceIdDTO resourceIdDTO = null);
        /// <summary>
        /// Updates the display name of the current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The new display name of the user. (optional)</param>
        /// <returns>Task of ResponseGirafUserDTO</returns>
        System.Threading.Tasks.Task<ResponseGirafUserDTO> V1UserDisplayNamePutAsync (string displayName = null);

        /// <summary>
        /// Updates the display name of the current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The new display name of the user. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGirafUserDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGirafUserDTO>> V1UserDisplayNamePutAsyncWithHttpInfo (string displayName = null);
        /// <summary>
        /// Get information about the logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseGirafUserDTO</returns>
        System.Threading.Tasks.Task<ResponseGirafUserDTO> V1UserGetAsync ();

        /// <summary>
        /// Get information about the logged in user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseGirafUserDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGirafUserDTO>> V1UserGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guardianId"></param>
        /// <param name="citizenId"></param>
        /// <returns>Task of ResponseGirafUserDTO</returns>
        System.Threading.Tasks.Task<ResponseGirafUserDTO> V1UserGuardianByGuardianIdCitizenByCitizenIdPostAsync (string guardianId, string citizenId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guardianId"></param>
        /// <param name="citizenId"></param>
        /// <returns>Task of ApiResponse (ResponseGirafUserDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGirafUserDTO>> V1UserGuardianByGuardianIdCitizenByCitizenIdPostAsyncWithHttpInfo (string guardianId, string citizenId);
        /// <summary>
        /// Allows the user to delete his profile icon.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> V1UserIconDeleteAsync ();

        /// <summary>
        /// Allows the user to delete his profile icon.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> V1UserIconDeleteAsyncWithHttpInfo ();
        /// <summary>
        /// Allows the user to update his profile icon.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> V1UserIconPutAsync ();

        /// <summary>
        /// Allows the user to update his profile icon.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> V1UserIconPutAsyncWithHttpInfo ();
        /// <summary>
        /// Updates username and screenname for the current authenticated user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="screenName"> (optional)</param>
        /// <returns>Task of ResponseGirafUserDTO</returns>
        System.Threading.Tasks.Task<ResponseGirafUserDTO> V1UserPatchAsync (string username = null, string screenName = null);

        /// <summary>
        /// Updates username and screenname for the current authenticated user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="screenName"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGirafUserDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGirafUserDTO>> V1UserPatchAsyncWithHttpInfo (string username = null, string screenName = null);
        /// <summary>
        /// Deletes a resource with the specified id from the given user&#39;s list of resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceIdDTO"> (optional)</param>
        /// <returns>Task of ResponseGirafUserDTO</returns>
        System.Threading.Tasks.Task<ResponseGirafUserDTO> V1UserResourceDeleteAsync (ResourceIdDTO resourceIdDTO = null);

        /// <summary>
        /// Deletes a resource with the specified id from the given user&#39;s list of resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceIdDTO"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGirafUserDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGirafUserDTO>> V1UserResourceDeleteAsyncWithHttpInfo (ResourceIdDTO resourceIdDTO = null);
        /// <summary>
        /// Read the currently authorized user&#39;s settings object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseSettingDTO</returns>
        System.Threading.Tasks.Task<ResponseSettingDTO> V1UserSettingsGetAsync ();

        /// <summary>
        /// Read the currently authorized user&#39;s settings object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseSettingDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSettingDTO>> V1UserSettingsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Updates the currently authenticated user settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options. (optional)</param>
        /// <returns>Task of ResponseSettingDTO</returns>
        System.Threading.Tasks.Task<ResponseSettingDTO> V1UserSettingsPatchAsync (SettingDTO options = null);

        /// <summary>
        /// Updates the currently authenticated user settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSettingDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSettingDTO>> V1UserSettingsPatchAsyncWithHttpInfo (SettingDTO options = null);
        /// <summary>
        /// Returns currently logged in users username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseString</returns>
        System.Threading.Tasks.Task<ResponseString> V1UserUsernameGetAsync ();

        /// <summary>
        /// Returns currently logged in users username
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseString)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseString>> V1UserUsernameGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IUserApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Allows retrieval of user icon by anyone since an usericon should be public 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResponseImageDTO</returns>
        public ResponseImageDTO V1UserByIdIconGet (string id)
        {
             ApiResponse<ResponseImageDTO> localVarResponse = V1UserByIdIconGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Allows retrieval of user icon by anyone since an usericon should be public 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResponseImageDTO</returns>
        public ApiResponse< ResponseImageDTO > V1UserByIdIconGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->V1UserByIdIconGet");

            var localVarPath = "/v1/User/{id}/icon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserByIdIconGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseImageDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseImageDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseImageDTO)));
        }

        /// <summary>
        /// Allows retrieval of user icon by anyone since an usericon should be public 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResponseImageDTO</returns>
        public async System.Threading.Tasks.Task<ResponseImageDTO> V1UserByIdIconGetAsync (string id)
        {
             ApiResponse<ResponseImageDTO> localVarResponse = await V1UserByIdIconGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows retrieval of user icon by anyone since an usericon should be public 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResponseImageDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseImageDTO>> V1UserByIdIconGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->V1UserByIdIconGet");

            var localVarPath = "/v1/User/{id}/icon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserByIdIconGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseImageDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseImageDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseImageDTO)));
        }

        /// <summary>
        /// Allows retrieval of user icon by anyone since an usericon should be public 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void V1UserByIdIconRawGet (string id)
        {
             V1UserByIdIconRawGetWithHttpInfo(id);
        }

        /// <summary>
        /// Allows retrieval of user icon by anyone since an usericon should be public 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V1UserByIdIconRawGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->V1UserByIdIconRawGet");

            var localVarPath = "/v1/User/{id}/icon/raw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserByIdIconRawGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Allows retrieval of user icon by anyone since an usericon should be public 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1UserByIdIconRawGetAsync (string id)
        {
             await V1UserByIdIconRawGetAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Allows retrieval of user icon by anyone since an usericon should be public 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1UserByIdIconRawGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->V1UserByIdIconRawGet");

            var localVarPath = "/v1/User/{id}/icon/raw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserByIdIconRawGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier.</param>
        /// <param name="username">Username. (optional)</param>
        /// <param name="screenName">Screen name. (optional)</param>
        /// <returns>ResponseGirafUserDTO</returns>
        public ResponseGirafUserDTO V1UserByIdPatch (string id, string username = null, string screenName = null)
        {
             ApiResponse<ResponseGirafUserDTO> localVarResponse = V1UserByIdPatchWithHttpInfo(id, username, screenName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier.</param>
        /// <param name="username">Username. (optional)</param>
        /// <param name="screenName">Screen name. (optional)</param>
        /// <returns>ApiResponse of ResponseGirafUserDTO</returns>
        public ApiResponse< ResponseGirafUserDTO > V1UserByIdPatchWithHttpInfo (string id, string username = null, string screenName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->V1UserByIdPatch");

            var localVarPath = "/v1/User/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (screenName != null && screenName.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(screenName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = screenName; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserByIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGirafUserDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGirafUserDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGirafUserDTO)));
        }

        /// <summary>
        /// Updates the user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier.</param>
        /// <param name="username">Username. (optional)</param>
        /// <param name="screenName">Screen name. (optional)</param>
        /// <returns>Task of ResponseGirafUserDTO</returns>
        public async System.Threading.Tasks.Task<ResponseGirafUserDTO> V1UserByIdPatchAsync (string id, string username = null, string screenName = null)
        {
             ApiResponse<ResponseGirafUserDTO> localVarResponse = await V1UserByIdPatchAsyncWithHttpInfo(id, username, screenName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier.</param>
        /// <param name="username">Username. (optional)</param>
        /// <param name="screenName">Screen name. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGirafUserDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseGirafUserDTO>> V1UserByIdPatchAsyncWithHttpInfo (string id, string username = null, string screenName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->V1UserByIdPatch");

            var localVarPath = "/v1/User/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (screenName != null && screenName.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(screenName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = screenName; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserByIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGirafUserDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGirafUserDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGirafUserDTO)));
        }

        /// <summary>
        /// Find information on the user with the username supplied as a url query parameter or the current user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResponseSettingDTO</returns>
        public ResponseSettingDTO V1UserByIdSettingsGet (string id)
        {
             ApiResponse<ResponseSettingDTO> localVarResponse = V1UserByIdSettingsGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find information on the user with the username supplied as a url query parameter or the current user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResponseSettingDTO</returns>
        public ApiResponse< ResponseSettingDTO > V1UserByIdSettingsGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->V1UserByIdSettingsGet");

            var localVarPath = "/v1/User/{id}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserByIdSettingsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSettingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSettingDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSettingDTO)));
        }

        /// <summary>
        /// Find information on the user with the username supplied as a url query parameter or the current user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResponseSettingDTO</returns>
        public async System.Threading.Tasks.Task<ResponseSettingDTO> V1UserByIdSettingsGetAsync (string id)
        {
             ApiResponse<ResponseSettingDTO> localVarResponse = await V1UserByIdSettingsGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find information on the user with the username supplied as a url query parameter or the current user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResponseSettingDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseSettingDTO>> V1UserByIdSettingsGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->V1UserByIdSettingsGet");

            var localVarPath = "/v1/User/{id}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserByIdSettingsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSettingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSettingDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSettingDTO)));
        }

        /// <summary>
        /// Updates the user settings for a user with the given id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options">Options. (optional)</param>
        /// <returns>ResponseSettingDTO</returns>
        public ResponseSettingDTO V1UserByIdSettingsPatch (string id, SettingDTO options = null)
        {
             ApiResponse<ResponseSettingDTO> localVarResponse = V1UserByIdSettingsPatchWithHttpInfo(id, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the user settings for a user with the given id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options">Options. (optional)</param>
        /// <returns>ApiResponse of ResponseSettingDTO</returns>
        public ApiResponse< ResponseSettingDTO > V1UserByIdSettingsPatchWithHttpInfo (string id, SettingDTO options = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->V1UserByIdSettingsPatch");

            var localVarPath = "/v1/User/{id}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserByIdSettingsPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSettingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSettingDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSettingDTO)));
        }

        /// <summary>
        /// Updates the user settings for a user with the given id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options">Options. (optional)</param>
        /// <returns>Task of ResponseSettingDTO</returns>
        public async System.Threading.Tasks.Task<ResponseSettingDTO> V1UserByIdSettingsPatchAsync (string id, SettingDTO options = null)
        {
             ApiResponse<ResponseSettingDTO> localVarResponse = await V1UserByIdSettingsPatchAsyncWithHttpInfo(id, options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the user settings for a user with the given id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options">Options. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSettingDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseSettingDTO>> V1UserByIdSettingsPatchAsyncWithHttpInfo (string id, SettingDTO options = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->V1UserByIdSettingsPatch");

            var localVarPath = "/v1/User/{id}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserByIdSettingsPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSettingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSettingDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSettingDTO)));
        }

        /// <summary>
        /// Gets the citizens for the specific user corresponding to the provided username. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>ResponseListUserNameDTO</returns>
        public ResponseListUserNameDTO V1UserByUsernameCitizensGet (string username)
        {
             ApiResponse<ResponseListUserNameDTO> localVarResponse = V1UserByUsernameCitizensGetWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the citizens for the specific user corresponding to the provided username. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>ApiResponse of ResponseListUserNameDTO</returns>
        public ApiResponse< ResponseListUserNameDTO > V1UserByUsernameCitizensGetWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->V1UserByUsernameCitizensGet");

            var localVarPath = "/v1/User/{username}/citizens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserByUsernameCitizensGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseListUserNameDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseListUserNameDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseListUserNameDTO)));
        }

        /// <summary>
        /// Gets the citizens for the specific user corresponding to the provided username. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>Task of ResponseListUserNameDTO</returns>
        public async System.Threading.Tasks.Task<ResponseListUserNameDTO> V1UserByUsernameCitizensGetAsync (string username)
        {
             ApiResponse<ResponseListUserNameDTO> localVarResponse = await V1UserByUsernameCitizensGetAsyncWithHttpInfo(username);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the citizens for the specific user corresponding to the provided username. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>Task of ApiResponse (ResponseListUserNameDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseListUserNameDTO>> V1UserByUsernameCitizensGetAsyncWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->V1UserByUsernameCitizensGet");

            var localVarPath = "/v1/User/{username}/citizens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserByUsernameCitizensGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseListUserNameDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseListUserNameDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseListUserNameDTO)));
        }

        /// <summary>
        /// Removes a user from its department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>ResponseDepartmentDTO</returns>
        public ResponseDepartmentDTO V1UserByUsernameDepartmentDelete (string username)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = V1UserByUsernameDepartmentDeleteWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a user from its department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>ApiResponse of ResponseDepartmentDTO</returns>
        public ApiResponse< ResponseDepartmentDTO > V1UserByUsernameDepartmentDeleteWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->V1UserByUsernameDepartmentDelete");

            var localVarPath = "/v1/User/{username}/department";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserByUsernameDepartmentDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Removes a user from its department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>Task of ResponseDepartmentDTO</returns>
        public async System.Threading.Tasks.Task<ResponseDepartmentDTO> V1UserByUsernameDepartmentDeleteAsync (string username)
        {
             ApiResponse<ResponseDepartmentDTO> localVarResponse = await V1UserByUsernameDepartmentDeleteAsyncWithHttpInfo(username);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes a user from its department. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>Task of ApiResponse (ResponseDepartmentDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDepartmentDTO>> V1UserByUsernameDepartmentDeleteAsyncWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->V1UserByUsernameDepartmentDelete");

            var localVarPath = "/v1/User/{username}/department";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserByUsernameDepartmentDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDepartmentDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDepartmentDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDepartmentDTO)));
        }

        /// <summary>
        /// Find information on the user with the username supplied as a url query parameter or the current user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>ResponseGirafUserDTO</returns>
        public ResponseGirafUserDTO V1UserByUsernameGet (string username)
        {
             ApiResponse<ResponseGirafUserDTO> localVarResponse = V1UserByUsernameGetWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find information on the user with the username supplied as a url query parameter or the current user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>ApiResponse of ResponseGirafUserDTO</returns>
        public ApiResponse< ResponseGirafUserDTO > V1UserByUsernameGetWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->V1UserByUsernameGet");

            var localVarPath = "/v1/User/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserByUsernameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGirafUserDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGirafUserDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGirafUserDTO)));
        }

        /// <summary>
        /// Find information on the user with the username supplied as a url query parameter or the current user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>Task of ResponseGirafUserDTO</returns>
        public async System.Threading.Tasks.Task<ResponseGirafUserDTO> V1UserByUsernameGetAsync (string username)
        {
             ApiResponse<ResponseGirafUserDTO> localVarResponse = await V1UserByUsernameGetAsyncWithHttpInfo(username);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find information on the user with the username supplied as a url query parameter or the current user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>Task of ApiResponse (ResponseGirafUserDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseGirafUserDTO>> V1UserByUsernameGetAsyncWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->V1UserByUsernameGet");

            var localVarPath = "/v1/User/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserByUsernameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGirafUserDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGirafUserDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGirafUserDTO)));
        }

        /// <summary>
        /// Gets the guardians for the specific user corresponding to the provided username. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>ResponseListUserNameDTO</returns>
        public ResponseListUserNameDTO V1UserByUsernameGuardiansGet (string username)
        {
             ApiResponse<ResponseListUserNameDTO> localVarResponse = V1UserByUsernameGuardiansGetWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the guardians for the specific user corresponding to the provided username. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>ApiResponse of ResponseListUserNameDTO</returns>
        public ApiResponse< ResponseListUserNameDTO > V1UserByUsernameGuardiansGetWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->V1UserByUsernameGuardiansGet");

            var localVarPath = "/v1/User/{username}/guardians";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserByUsernameGuardiansGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseListUserNameDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseListUserNameDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseListUserNameDTO)));
        }

        /// <summary>
        /// Gets the guardians for the specific user corresponding to the provided username. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>Task of ResponseListUserNameDTO</returns>
        public async System.Threading.Tasks.Task<ResponseListUserNameDTO> V1UserByUsernameGuardiansGetAsync (string username)
        {
             ApiResponse<ResponseListUserNameDTO> localVarResponse = await V1UserByUsernameGuardiansGetAsyncWithHttpInfo(username);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the guardians for the specific user corresponding to the provided username. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username.</param>
        /// <returns>Task of ApiResponse (ResponseListUserNameDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseListUserNameDTO>> V1UserByUsernameGuardiansGetAsyncWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->V1UserByUsernameGuardiansGet");

            var localVarPath = "/v1/User/{username}/guardians";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserByUsernameGuardiansGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseListUserNameDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseListUserNameDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseListUserNameDTO)));
        }

        /// <summary>
        /// Adds a resource to the given user&#39;s list of resources. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="resourceIdDTO"> (optional)</param>
        /// <returns>ResponseGirafUserDTO</returns>
        public ResponseGirafUserDTO V1UserByUsernameResourcePost (string username, ResourceIdDTO resourceIdDTO = null)
        {
             ApiResponse<ResponseGirafUserDTO> localVarResponse = V1UserByUsernameResourcePostWithHttpInfo(username, resourceIdDTO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a resource to the given user&#39;s list of resources. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="resourceIdDTO"> (optional)</param>
        /// <returns>ApiResponse of ResponseGirafUserDTO</returns>
        public ApiResponse< ResponseGirafUserDTO > V1UserByUsernameResourcePostWithHttpInfo (string username, ResourceIdDTO resourceIdDTO = null)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->V1UserByUsernameResourcePost");

            var localVarPath = "/v1/User/{username}/resource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (resourceIdDTO != null && resourceIdDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(resourceIdDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resourceIdDTO; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserByUsernameResourcePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGirafUserDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGirafUserDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGirafUserDTO)));
        }

        /// <summary>
        /// Adds a resource to the given user&#39;s list of resources. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="resourceIdDTO"> (optional)</param>
        /// <returns>Task of ResponseGirafUserDTO</returns>
        public async System.Threading.Tasks.Task<ResponseGirafUserDTO> V1UserByUsernameResourcePostAsync (string username, ResourceIdDTO resourceIdDTO = null)
        {
             ApiResponse<ResponseGirafUserDTO> localVarResponse = await V1UserByUsernameResourcePostAsyncWithHttpInfo(username, resourceIdDTO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a resource to the given user&#39;s list of resources. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="resourceIdDTO"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGirafUserDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseGirafUserDTO>> V1UserByUsernameResourcePostAsyncWithHttpInfo (string username, ResourceIdDTO resourceIdDTO = null)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->V1UserByUsernameResourcePost");

            var localVarPath = "/v1/User/{username}/resource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (resourceIdDTO != null && resourceIdDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(resourceIdDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resourceIdDTO; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserByUsernameResourcePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGirafUserDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGirafUserDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGirafUserDTO)));
        }

        /// <summary>
        /// Updates the display name of the current user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The new display name of the user. (optional)</param>
        /// <returns>ResponseGirafUserDTO</returns>
        public ResponseGirafUserDTO V1UserDisplayNamePut (string displayName = null)
        {
             ApiResponse<ResponseGirafUserDTO> localVarResponse = V1UserDisplayNamePutWithHttpInfo(displayName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the display name of the current user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The new display name of the user. (optional)</param>
        /// <returns>ApiResponse of ResponseGirafUserDTO</returns>
        public ApiResponse< ResponseGirafUserDTO > V1UserDisplayNamePutWithHttpInfo (string displayName = null)
        {

            var localVarPath = "/v1/User/display-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (displayName != null && displayName.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(displayName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = displayName; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserDisplayNamePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGirafUserDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGirafUserDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGirafUserDTO)));
        }

        /// <summary>
        /// Updates the display name of the current user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The new display name of the user. (optional)</param>
        /// <returns>Task of ResponseGirafUserDTO</returns>
        public async System.Threading.Tasks.Task<ResponseGirafUserDTO> V1UserDisplayNamePutAsync (string displayName = null)
        {
             ApiResponse<ResponseGirafUserDTO> localVarResponse = await V1UserDisplayNamePutAsyncWithHttpInfo(displayName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the display name of the current user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayName">The new display name of the user. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGirafUserDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseGirafUserDTO>> V1UserDisplayNamePutAsyncWithHttpInfo (string displayName = null)
        {

            var localVarPath = "/v1/User/display-name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (displayName != null && displayName.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(displayName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = displayName; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserDisplayNamePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGirafUserDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGirafUserDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGirafUserDTO)));
        }

        /// <summary>
        /// Get information about the logged in user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseGirafUserDTO</returns>
        public ResponseGirafUserDTO V1UserGet ()
        {
             ApiResponse<ResponseGirafUserDTO> localVarResponse = V1UserGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about the logged in user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseGirafUserDTO</returns>
        public ApiResponse< ResponseGirafUserDTO > V1UserGetWithHttpInfo ()
        {

            var localVarPath = "/v1/User";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGirafUserDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGirafUserDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGirafUserDTO)));
        }

        /// <summary>
        /// Get information about the logged in user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseGirafUserDTO</returns>
        public async System.Threading.Tasks.Task<ResponseGirafUserDTO> V1UserGetAsync ()
        {
             ApiResponse<ResponseGirafUserDTO> localVarResponse = await V1UserGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information about the logged in user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseGirafUserDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseGirafUserDTO>> V1UserGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/User";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGirafUserDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGirafUserDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGirafUserDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guardianId"></param>
        /// <param name="citizenId"></param>
        /// <returns>ResponseGirafUserDTO</returns>
        public ResponseGirafUserDTO V1UserGuardianByGuardianIdCitizenByCitizenIdPost (string guardianId, string citizenId)
        {
             ApiResponse<ResponseGirafUserDTO> localVarResponse = V1UserGuardianByGuardianIdCitizenByCitizenIdPostWithHttpInfo(guardianId, citizenId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guardianId"></param>
        /// <param name="citizenId"></param>
        /// <returns>ApiResponse of ResponseGirafUserDTO</returns>
        public ApiResponse< ResponseGirafUserDTO > V1UserGuardianByGuardianIdCitizenByCitizenIdPostWithHttpInfo (string guardianId, string citizenId)
        {
            // verify the required parameter 'guardianId' is set
            if (guardianId == null)
                throw new ApiException(400, "Missing required parameter 'guardianId' when calling UserApi->V1UserGuardianByGuardianIdCitizenByCitizenIdPost");
            // verify the required parameter 'citizenId' is set
            if (citizenId == null)
                throw new ApiException(400, "Missing required parameter 'citizenId' when calling UserApi->V1UserGuardianByGuardianIdCitizenByCitizenIdPost");

            var localVarPath = "/v1/User/guardian/{guardianId}/citizen/{citizenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (guardianId != null) localVarPathParams.Add("guardianId", Configuration.ApiClient.ParameterToString(guardianId)); // path parameter
            if (citizenId != null) localVarPathParams.Add("citizenId", Configuration.ApiClient.ParameterToString(citizenId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserGuardianByGuardianIdCitizenByCitizenIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGirafUserDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGirafUserDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGirafUserDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guardianId"></param>
        /// <param name="citizenId"></param>
        /// <returns>Task of ResponseGirafUserDTO</returns>
        public async System.Threading.Tasks.Task<ResponseGirafUserDTO> V1UserGuardianByGuardianIdCitizenByCitizenIdPostAsync (string guardianId, string citizenId)
        {
             ApiResponse<ResponseGirafUserDTO> localVarResponse = await V1UserGuardianByGuardianIdCitizenByCitizenIdPostAsyncWithHttpInfo(guardianId, citizenId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guardianId"></param>
        /// <param name="citizenId"></param>
        /// <returns>Task of ApiResponse (ResponseGirafUserDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseGirafUserDTO>> V1UserGuardianByGuardianIdCitizenByCitizenIdPostAsyncWithHttpInfo (string guardianId, string citizenId)
        {
            // verify the required parameter 'guardianId' is set
            if (guardianId == null)
                throw new ApiException(400, "Missing required parameter 'guardianId' when calling UserApi->V1UserGuardianByGuardianIdCitizenByCitizenIdPost");
            // verify the required parameter 'citizenId' is set
            if (citizenId == null)
                throw new ApiException(400, "Missing required parameter 'citizenId' when calling UserApi->V1UserGuardianByGuardianIdCitizenByCitizenIdPost");

            var localVarPath = "/v1/User/guardian/{guardianId}/citizen/{citizenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (guardianId != null) localVarPathParams.Add("guardianId", Configuration.ApiClient.ParameterToString(guardianId)); // path parameter
            if (citizenId != null) localVarPathParams.Add("citizenId", Configuration.ApiClient.ParameterToString(citizenId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserGuardianByGuardianIdCitizenByCitizenIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGirafUserDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGirafUserDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGirafUserDTO)));
        }

        /// <summary>
        /// Allows the user to delete his profile icon. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Response</returns>
        public Response V1UserIconDelete ()
        {
             ApiResponse<Response> localVarResponse = V1UserIconDeleteWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Allows the user to delete his profile icon. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Response</returns>
        public ApiResponse< Response > V1UserIconDeleteWithHttpInfo ()
        {

            var localVarPath = "/v1/User/icon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserIconDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
        }

        /// <summary>
        /// Allows the user to delete his profile icon. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> V1UserIconDeleteAsync ()
        {
             ApiResponse<Response> localVarResponse = await V1UserIconDeleteAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows the user to delete his profile icon. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Response>> V1UserIconDeleteAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/User/icon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserIconDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
        }

        /// <summary>
        /// Allows the user to update his profile icon. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Response</returns>
        public Response V1UserIconPut ()
        {
             ApiResponse<Response> localVarResponse = V1UserIconPutWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Allows the user to update his profile icon. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Response</returns>
        public ApiResponse< Response > V1UserIconPutWithHttpInfo ()
        {

            var localVarPath = "/v1/User/icon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserIconPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
        }

        /// <summary>
        /// Allows the user to update his profile icon. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> V1UserIconPutAsync ()
        {
             ApiResponse<Response> localVarResponse = await V1UserIconPutAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows the user to update his profile icon. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Response>> V1UserIconPutAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/User/icon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserIconPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
        }

        /// <summary>
        /// Updates username and screenname for the current authenticated user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="screenName"> (optional)</param>
        /// <returns>ResponseGirafUserDTO</returns>
        public ResponseGirafUserDTO V1UserPatch (string username = null, string screenName = null)
        {
             ApiResponse<ResponseGirafUserDTO> localVarResponse = V1UserPatchWithHttpInfo(username, screenName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates username and screenname for the current authenticated user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="screenName"> (optional)</param>
        /// <returns>ApiResponse of ResponseGirafUserDTO</returns>
        public ApiResponse< ResponseGirafUserDTO > V1UserPatchWithHttpInfo (string username = null, string screenName = null)
        {

            var localVarPath = "/v1/User";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (screenName != null && screenName.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(screenName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = screenName; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGirafUserDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGirafUserDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGirafUserDTO)));
        }

        /// <summary>
        /// Updates username and screenname for the current authenticated user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="screenName"> (optional)</param>
        /// <returns>Task of ResponseGirafUserDTO</returns>
        public async System.Threading.Tasks.Task<ResponseGirafUserDTO> V1UserPatchAsync (string username = null, string screenName = null)
        {
             ApiResponse<ResponseGirafUserDTO> localVarResponse = await V1UserPatchAsyncWithHttpInfo(username, screenName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates username and screenname for the current authenticated user. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> (optional)</param>
        /// <param name="screenName"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGirafUserDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseGirafUserDTO>> V1UserPatchAsyncWithHttpInfo (string username = null, string screenName = null)
        {

            var localVarPath = "/v1/User";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (screenName != null && screenName.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(screenName); // http body (model) parameter
            }
            else
            {
                localVarPostBody = screenName; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGirafUserDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGirafUserDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGirafUserDTO)));
        }

        /// <summary>
        /// Deletes a resource with the specified id from the given user&#39;s list of resources. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceIdDTO"> (optional)</param>
        /// <returns>ResponseGirafUserDTO</returns>
        public ResponseGirafUserDTO V1UserResourceDelete (ResourceIdDTO resourceIdDTO = null)
        {
             ApiResponse<ResponseGirafUserDTO> localVarResponse = V1UserResourceDeleteWithHttpInfo(resourceIdDTO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a resource with the specified id from the given user&#39;s list of resources. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceIdDTO"> (optional)</param>
        /// <returns>ApiResponse of ResponseGirafUserDTO</returns>
        public ApiResponse< ResponseGirafUserDTO > V1UserResourceDeleteWithHttpInfo (ResourceIdDTO resourceIdDTO = null)
        {

            var localVarPath = "/v1/User/resource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceIdDTO != null && resourceIdDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(resourceIdDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resourceIdDTO; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserResourceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGirafUserDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGirafUserDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGirafUserDTO)));
        }

        /// <summary>
        /// Deletes a resource with the specified id from the given user&#39;s list of resources. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceIdDTO"> (optional)</param>
        /// <returns>Task of ResponseGirafUserDTO</returns>
        public async System.Threading.Tasks.Task<ResponseGirafUserDTO> V1UserResourceDeleteAsync (ResourceIdDTO resourceIdDTO = null)
        {
             ApiResponse<ResponseGirafUserDTO> localVarResponse = await V1UserResourceDeleteAsyncWithHttpInfo(resourceIdDTO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a resource with the specified id from the given user&#39;s list of resources. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceIdDTO"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGirafUserDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseGirafUserDTO>> V1UserResourceDeleteAsyncWithHttpInfo (ResourceIdDTO resourceIdDTO = null)
        {

            var localVarPath = "/v1/User/resource";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resourceIdDTO != null && resourceIdDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(resourceIdDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resourceIdDTO; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserResourceDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGirafUserDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGirafUserDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGirafUserDTO)));
        }

        /// <summary>
        /// Read the currently authorized user&#39;s settings object. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseSettingDTO</returns>
        public ResponseSettingDTO V1UserSettingsGet ()
        {
             ApiResponse<ResponseSettingDTO> localVarResponse = V1UserSettingsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read the currently authorized user&#39;s settings object. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseSettingDTO</returns>
        public ApiResponse< ResponseSettingDTO > V1UserSettingsGetWithHttpInfo ()
        {

            var localVarPath = "/v1/User/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserSettingsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSettingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSettingDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSettingDTO)));
        }

        /// <summary>
        /// Read the currently authorized user&#39;s settings object. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseSettingDTO</returns>
        public async System.Threading.Tasks.Task<ResponseSettingDTO> V1UserSettingsGetAsync ()
        {
             ApiResponse<ResponseSettingDTO> localVarResponse = await V1UserSettingsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read the currently authorized user&#39;s settings object. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseSettingDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseSettingDTO>> V1UserSettingsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/User/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserSettingsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSettingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSettingDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSettingDTO)));
        }

        /// <summary>
        /// Updates the currently authenticated user settings. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options. (optional)</param>
        /// <returns>ResponseSettingDTO</returns>
        public ResponseSettingDTO V1UserSettingsPatch (SettingDTO options = null)
        {
             ApiResponse<ResponseSettingDTO> localVarResponse = V1UserSettingsPatchWithHttpInfo(options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the currently authenticated user settings. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options. (optional)</param>
        /// <returns>ApiResponse of ResponseSettingDTO</returns>
        public ApiResponse< ResponseSettingDTO > V1UserSettingsPatchWithHttpInfo (SettingDTO options = null)
        {

            var localVarPath = "/v1/User/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserSettingsPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSettingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSettingDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSettingDTO)));
        }

        /// <summary>
        /// Updates the currently authenticated user settings. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options. (optional)</param>
        /// <returns>Task of ResponseSettingDTO</returns>
        public async System.Threading.Tasks.Task<ResponseSettingDTO> V1UserSettingsPatchAsync (SettingDTO options = null)
        {
             ApiResponse<ResponseSettingDTO> localVarResponse = await V1UserSettingsPatchAsyncWithHttpInfo(options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the currently authenticated user settings. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options">Options. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSettingDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseSettingDTO>> V1UserSettingsPatchAsyncWithHttpInfo (SettingDTO options = null)
        {

            var localVarPath = "/v1/User/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserSettingsPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSettingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSettingDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSettingDTO)));
        }

        /// <summary>
        /// Returns currently logged in users username 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseString</returns>
        public ResponseString V1UserUsernameGet ()
        {
             ApiResponse<ResponseString> localVarResponse = V1UserUsernameGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns currently logged in users username 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseString</returns>
        public ApiResponse< ResponseString > V1UserUsernameGetWithHttpInfo ()
        {

            var localVarPath = "/v1/User/username";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserUsernameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseString) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseString)));
        }

        /// <summary>
        /// Returns currently logged in users username 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseString</returns>
        public async System.Threading.Tasks.Task<ResponseString> V1UserUsernameGetAsync ()
        {
             ApiResponse<ResponseString> localVarResponse = await V1UserUsernameGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns currently logged in users username 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseString)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseString>> V1UserUsernameGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/User/username";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserUsernameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseString) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseString)));
        }

    }
}
