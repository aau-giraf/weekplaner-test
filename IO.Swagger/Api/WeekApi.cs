/* 
 * The Giraf REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWeekApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes the entire week with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear"></param>
        /// <param name="weekNumber"></param>
        /// <returns>ResponseIEnumerableWeekDTO</returns>
        ResponseIEnumerableWeekDTO V1WeekByWeekYearByWeekNumberDelete (int? weekYear, int? weekNumber);

        /// <summary>
        /// Deletes the entire week with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear"></param>
        /// <param name="weekNumber"></param>
        /// <returns>ApiResponse of ResponseIEnumerableWeekDTO</returns>
        ApiResponse<ResponseIEnumerableWeekDTO> V1WeekByWeekYearByWeekNumberDeleteWithHttpInfo (int? weekYear, int? weekNumber);
        /// <summary>
        /// Gets the schedule with the specified week number and year.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear">The year of the week schedule to fetch.</param>
        /// <param name="weekNumber">The week number of the week schedule to fetch.</param>
        /// <returns>ResponseWeekDTO</returns>
        ResponseWeekDTO V1WeekByWeekYearByWeekNumberGet (int? weekYear, int? weekNumber);

        /// <summary>
        /// Gets the schedule with the specified week number and year.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear">The year of the week schedule to fetch.</param>
        /// <param name="weekNumber">The week number of the week schedule to fetch.</param>
        /// <returns>ApiResponse of ResponseWeekDTO</returns>
        ApiResponse<ResponseWeekDTO> V1WeekByWeekYearByWeekNumberGetWithHttpInfo (int? weekYear, int? weekNumber);
        /// <summary>
        /// Updates the entire information of the week with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear"></param>
        /// <param name="weekNumber"></param>
        /// <param name="newWeek">A serialized Week with new information. (optional)</param>
        /// <returns>ResponseWeekDTO</returns>
        ResponseWeekDTO V1WeekByWeekYearByWeekNumberPut (int? weekYear, int? weekNumber, WeekDTO newWeek = null);

        /// <summary>
        /// Updates the entire information of the week with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear"></param>
        /// <param name="weekNumber"></param>
        /// <param name="newWeek">A serialized Week with new information. (optional)</param>
        /// <returns>ApiResponse of ResponseWeekDTO</returns>
        ApiResponse<ResponseWeekDTO> V1WeekByWeekYearByWeekNumberPutWithHttpInfo (int? weekYear, int? weekNumber, WeekDTO newWeek = null);
        /// <summary>
        /// Gets all week schedule name and ids for the currently authenticated citizen.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseIEnumerableWeekNameDTO</returns>
        ResponseIEnumerableWeekNameDTO V1WeekGet ();

        /// <summary>
        /// Gets all week schedule name and ids for the currently authenticated citizen.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseIEnumerableWeekNameDTO</returns>
        ApiResponse<ResponseIEnumerableWeekNameDTO> V1WeekGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes the entire week with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear"></param>
        /// <param name="weekNumber"></param>
        /// <returns>Task of ResponseIEnumerableWeekDTO</returns>
        System.Threading.Tasks.Task<ResponseIEnumerableWeekDTO> V1WeekByWeekYearByWeekNumberDeleteAsync (int? weekYear, int? weekNumber);

        /// <summary>
        /// Deletes the entire week with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear"></param>
        /// <param name="weekNumber"></param>
        /// <returns>Task of ApiResponse (ResponseIEnumerableWeekDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseIEnumerableWeekDTO>> V1WeekByWeekYearByWeekNumberDeleteAsyncWithHttpInfo (int? weekYear, int? weekNumber);
        /// <summary>
        /// Gets the schedule with the specified week number and year.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear">The year of the week schedule to fetch.</param>
        /// <param name="weekNumber">The week number of the week schedule to fetch.</param>
        /// <returns>Task of ResponseWeekDTO</returns>
        System.Threading.Tasks.Task<ResponseWeekDTO> V1WeekByWeekYearByWeekNumberGetAsync (int? weekYear, int? weekNumber);

        /// <summary>
        /// Gets the schedule with the specified week number and year.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear">The year of the week schedule to fetch.</param>
        /// <param name="weekNumber">The week number of the week schedule to fetch.</param>
        /// <returns>Task of ApiResponse (ResponseWeekDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseWeekDTO>> V1WeekByWeekYearByWeekNumberGetAsyncWithHttpInfo (int? weekYear, int? weekNumber);
        /// <summary>
        /// Updates the entire information of the week with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear"></param>
        /// <param name="weekNumber"></param>
        /// <param name="newWeek">A serialized Week with new information. (optional)</param>
        /// <returns>Task of ResponseWeekDTO</returns>
        System.Threading.Tasks.Task<ResponseWeekDTO> V1WeekByWeekYearByWeekNumberPutAsync (int? weekYear, int? weekNumber, WeekDTO newWeek = null);

        /// <summary>
        /// Updates the entire information of the week with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear"></param>
        /// <param name="weekNumber"></param>
        /// <param name="newWeek">A serialized Week with new information. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseWeekDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseWeekDTO>> V1WeekByWeekYearByWeekNumberPutAsyncWithHttpInfo (int? weekYear, int? weekNumber, WeekDTO newWeek = null);
        /// <summary>
        /// Gets all week schedule name and ids for the currently authenticated citizen.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseIEnumerableWeekNameDTO</returns>
        System.Threading.Tasks.Task<ResponseIEnumerableWeekNameDTO> V1WeekGetAsync ();

        /// <summary>
        /// Gets all week schedule name and ids for the currently authenticated citizen.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseIEnumerableWeekNameDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseIEnumerableWeekNameDTO>> V1WeekGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WeekApi : IWeekApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WeekApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WeekApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WeekApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WeekApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes the entire week with the given id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear"></param>
        /// <param name="weekNumber"></param>
        /// <returns>ResponseIEnumerableWeekDTO</returns>
        public ResponseIEnumerableWeekDTO V1WeekByWeekYearByWeekNumberDelete (int? weekYear, int? weekNumber)
        {
             ApiResponse<ResponseIEnumerableWeekDTO> localVarResponse = V1WeekByWeekYearByWeekNumberDeleteWithHttpInfo(weekYear, weekNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the entire week with the given id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear"></param>
        /// <param name="weekNumber"></param>
        /// <returns>ApiResponse of ResponseIEnumerableWeekDTO</returns>
        public ApiResponse< ResponseIEnumerableWeekDTO > V1WeekByWeekYearByWeekNumberDeleteWithHttpInfo (int? weekYear, int? weekNumber)
        {
            // verify the required parameter 'weekYear' is set
            if (weekYear == null)
                throw new ApiException(400, "Missing required parameter 'weekYear' when calling WeekApi->V1WeekByWeekYearByWeekNumberDelete");
            // verify the required parameter 'weekNumber' is set
            if (weekNumber == null)
                throw new ApiException(400, "Missing required parameter 'weekNumber' when calling WeekApi->V1WeekByWeekYearByWeekNumberDelete");

            var localVarPath = "/v1/Week/{weekYear}/{weekNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (weekYear != null) localVarPathParams.Add("weekYear", Configuration.ApiClient.ParameterToString(weekYear)); // path parameter
            if (weekNumber != null) localVarPathParams.Add("weekNumber", Configuration.ApiClient.ParameterToString(weekNumber)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1WeekByWeekYearByWeekNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseIEnumerableWeekDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseIEnumerableWeekDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseIEnumerableWeekDTO)));
        }

        /// <summary>
        /// Deletes the entire week with the given id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear"></param>
        /// <param name="weekNumber"></param>
        /// <returns>Task of ResponseIEnumerableWeekDTO</returns>
        public async System.Threading.Tasks.Task<ResponseIEnumerableWeekDTO> V1WeekByWeekYearByWeekNumberDeleteAsync (int? weekYear, int? weekNumber)
        {
             ApiResponse<ResponseIEnumerableWeekDTO> localVarResponse = await V1WeekByWeekYearByWeekNumberDeleteAsyncWithHttpInfo(weekYear, weekNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the entire week with the given id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear"></param>
        /// <param name="weekNumber"></param>
        /// <returns>Task of ApiResponse (ResponseIEnumerableWeekDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseIEnumerableWeekDTO>> V1WeekByWeekYearByWeekNumberDeleteAsyncWithHttpInfo (int? weekYear, int? weekNumber)
        {
            // verify the required parameter 'weekYear' is set
            if (weekYear == null)
                throw new ApiException(400, "Missing required parameter 'weekYear' when calling WeekApi->V1WeekByWeekYearByWeekNumberDelete");
            // verify the required parameter 'weekNumber' is set
            if (weekNumber == null)
                throw new ApiException(400, "Missing required parameter 'weekNumber' when calling WeekApi->V1WeekByWeekYearByWeekNumberDelete");

            var localVarPath = "/v1/Week/{weekYear}/{weekNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (weekYear != null) localVarPathParams.Add("weekYear", Configuration.ApiClient.ParameterToString(weekYear)); // path parameter
            if (weekNumber != null) localVarPathParams.Add("weekNumber", Configuration.ApiClient.ParameterToString(weekNumber)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1WeekByWeekYearByWeekNumberDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseIEnumerableWeekDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseIEnumerableWeekDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseIEnumerableWeekDTO)));
        }

        /// <summary>
        /// Gets the schedule with the specified week number and year. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear">The year of the week schedule to fetch.</param>
        /// <param name="weekNumber">The week number of the week schedule to fetch.</param>
        /// <returns>ResponseWeekDTO</returns>
        public ResponseWeekDTO V1WeekByWeekYearByWeekNumberGet (int? weekYear, int? weekNumber)
        {
             ApiResponse<ResponseWeekDTO> localVarResponse = V1WeekByWeekYearByWeekNumberGetWithHttpInfo(weekYear, weekNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the schedule with the specified week number and year. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear">The year of the week schedule to fetch.</param>
        /// <param name="weekNumber">The week number of the week schedule to fetch.</param>
        /// <returns>ApiResponse of ResponseWeekDTO</returns>
        public ApiResponse< ResponseWeekDTO > V1WeekByWeekYearByWeekNumberGetWithHttpInfo (int? weekYear, int? weekNumber)
        {
            // verify the required parameter 'weekYear' is set
            if (weekYear == null)
                throw new ApiException(400, "Missing required parameter 'weekYear' when calling WeekApi->V1WeekByWeekYearByWeekNumberGet");
            // verify the required parameter 'weekNumber' is set
            if (weekNumber == null)
                throw new ApiException(400, "Missing required parameter 'weekNumber' when calling WeekApi->V1WeekByWeekYearByWeekNumberGet");

            var localVarPath = "/v1/Week/{weekYear}/{weekNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (weekYear != null) localVarPathParams.Add("weekYear", Configuration.ApiClient.ParameterToString(weekYear)); // path parameter
            if (weekNumber != null) localVarPathParams.Add("weekNumber", Configuration.ApiClient.ParameterToString(weekNumber)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1WeekByWeekYearByWeekNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseWeekDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseWeekDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseWeekDTO)));
        }

        /// <summary>
        /// Gets the schedule with the specified week number and year. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear">The year of the week schedule to fetch.</param>
        /// <param name="weekNumber">The week number of the week schedule to fetch.</param>
        /// <returns>Task of ResponseWeekDTO</returns>
        public async System.Threading.Tasks.Task<ResponseWeekDTO> V1WeekByWeekYearByWeekNumberGetAsync (int? weekYear, int? weekNumber)
        {
             ApiResponse<ResponseWeekDTO> localVarResponse = await V1WeekByWeekYearByWeekNumberGetAsyncWithHttpInfo(weekYear, weekNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the schedule with the specified week number and year. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear">The year of the week schedule to fetch.</param>
        /// <param name="weekNumber">The week number of the week schedule to fetch.</param>
        /// <returns>Task of ApiResponse (ResponseWeekDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseWeekDTO>> V1WeekByWeekYearByWeekNumberGetAsyncWithHttpInfo (int? weekYear, int? weekNumber)
        {
            // verify the required parameter 'weekYear' is set
            if (weekYear == null)
                throw new ApiException(400, "Missing required parameter 'weekYear' when calling WeekApi->V1WeekByWeekYearByWeekNumberGet");
            // verify the required parameter 'weekNumber' is set
            if (weekNumber == null)
                throw new ApiException(400, "Missing required parameter 'weekNumber' when calling WeekApi->V1WeekByWeekYearByWeekNumberGet");

            var localVarPath = "/v1/Week/{weekYear}/{weekNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (weekYear != null) localVarPathParams.Add("weekYear", Configuration.ApiClient.ParameterToString(weekYear)); // path parameter
            if (weekNumber != null) localVarPathParams.Add("weekNumber", Configuration.ApiClient.ParameterToString(weekNumber)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1WeekByWeekYearByWeekNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseWeekDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseWeekDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseWeekDTO)));
        }

        /// <summary>
        /// Updates the entire information of the week with the given id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear"></param>
        /// <param name="weekNumber"></param>
        /// <param name="newWeek">A serialized Week with new information. (optional)</param>
        /// <returns>ResponseWeekDTO</returns>
        public ResponseWeekDTO V1WeekByWeekYearByWeekNumberPut (int? weekYear, int? weekNumber, WeekDTO newWeek = null)
        {
             ApiResponse<ResponseWeekDTO> localVarResponse = V1WeekByWeekYearByWeekNumberPutWithHttpInfo(weekYear, weekNumber, newWeek);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the entire information of the week with the given id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear"></param>
        /// <param name="weekNumber"></param>
        /// <param name="newWeek">A serialized Week with new information. (optional)</param>
        /// <returns>ApiResponse of ResponseWeekDTO</returns>
        public ApiResponse< ResponseWeekDTO > V1WeekByWeekYearByWeekNumberPutWithHttpInfo (int? weekYear, int? weekNumber, WeekDTO newWeek = null)
        {
            // verify the required parameter 'weekYear' is set
            if (weekYear == null)
                throw new ApiException(400, "Missing required parameter 'weekYear' when calling WeekApi->V1WeekByWeekYearByWeekNumberPut");
            // verify the required parameter 'weekNumber' is set
            if (weekNumber == null)
                throw new ApiException(400, "Missing required parameter 'weekNumber' when calling WeekApi->V1WeekByWeekYearByWeekNumberPut");

            var localVarPath = "/v1/Week/{weekYear}/{weekNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (weekYear != null) localVarPathParams.Add("weekYear", Configuration.ApiClient.ParameterToString(weekYear)); // path parameter
            if (weekNumber != null) localVarPathParams.Add("weekNumber", Configuration.ApiClient.ParameterToString(weekNumber)); // path parameter
            if (newWeek != null && newWeek.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(newWeek); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newWeek; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1WeekByWeekYearByWeekNumberPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseWeekDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseWeekDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseWeekDTO)));
        }

        /// <summary>
        /// Updates the entire information of the week with the given id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear"></param>
        /// <param name="weekNumber"></param>
        /// <param name="newWeek">A serialized Week with new information. (optional)</param>
        /// <returns>Task of ResponseWeekDTO</returns>
        public async System.Threading.Tasks.Task<ResponseWeekDTO> V1WeekByWeekYearByWeekNumberPutAsync (int? weekYear, int? weekNumber, WeekDTO newWeek = null)
        {
             ApiResponse<ResponseWeekDTO> localVarResponse = await V1WeekByWeekYearByWeekNumberPutAsyncWithHttpInfo(weekYear, weekNumber, newWeek);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the entire information of the week with the given id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weekYear"></param>
        /// <param name="weekNumber"></param>
        /// <param name="newWeek">A serialized Week with new information. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseWeekDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseWeekDTO>> V1WeekByWeekYearByWeekNumberPutAsyncWithHttpInfo (int? weekYear, int? weekNumber, WeekDTO newWeek = null)
        {
            // verify the required parameter 'weekYear' is set
            if (weekYear == null)
                throw new ApiException(400, "Missing required parameter 'weekYear' when calling WeekApi->V1WeekByWeekYearByWeekNumberPut");
            // verify the required parameter 'weekNumber' is set
            if (weekNumber == null)
                throw new ApiException(400, "Missing required parameter 'weekNumber' when calling WeekApi->V1WeekByWeekYearByWeekNumberPut");

            var localVarPath = "/v1/Week/{weekYear}/{weekNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (weekYear != null) localVarPathParams.Add("weekYear", Configuration.ApiClient.ParameterToString(weekYear)); // path parameter
            if (weekNumber != null) localVarPathParams.Add("weekNumber", Configuration.ApiClient.ParameterToString(weekNumber)); // path parameter
            if (newWeek != null && newWeek.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(newWeek); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newWeek; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1WeekByWeekYearByWeekNumberPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseWeekDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseWeekDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseWeekDTO)));
        }

        /// <summary>
        /// Gets all week schedule name and ids for the currently authenticated citizen. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseIEnumerableWeekNameDTO</returns>
        public ResponseIEnumerableWeekNameDTO V1WeekGet ()
        {
             ApiResponse<ResponseIEnumerableWeekNameDTO> localVarResponse = V1WeekGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all week schedule name and ids for the currently authenticated citizen. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseIEnumerableWeekNameDTO</returns>
        public ApiResponse< ResponseIEnumerableWeekNameDTO > V1WeekGetWithHttpInfo ()
        {

            var localVarPath = "/v1/Week";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1WeekGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseIEnumerableWeekNameDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseIEnumerableWeekNameDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseIEnumerableWeekNameDTO)));
        }

        /// <summary>
        /// Gets all week schedule name and ids for the currently authenticated citizen. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseIEnumerableWeekNameDTO</returns>
        public async System.Threading.Tasks.Task<ResponseIEnumerableWeekNameDTO> V1WeekGetAsync ()
        {
             ApiResponse<ResponseIEnumerableWeekNameDTO> localVarResponse = await V1WeekGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all week schedule name and ids for the currently authenticated citizen. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseIEnumerableWeekNameDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseIEnumerableWeekNameDTO>> V1WeekGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/Week";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1WeekGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseIEnumerableWeekNameDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseIEnumerableWeekNameDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseIEnumerableWeekNameDTO)));
        }

    }
}
