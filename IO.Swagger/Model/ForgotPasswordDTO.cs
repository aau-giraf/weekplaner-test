/* 
 * The Giraf REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The ForgotPasswordViewModel is used when a user has forgot his password and request a new one. It  simply defines the structure of the json-string that must be sent to request a new password.
    /// </summary>
    [DataContract]
    public partial class ForgotPasswordDTO :  IEquatable<ForgotPasswordDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ForgotPasswordDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ForgotPasswordDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ForgotPasswordDTO" /> class.
        /// </summary>
        /// <param name="Username">The users username. (required).</param>
        /// <param name="Email">His email address. (required).</param>
        public ForgotPasswordDTO(string Username = default(string), string Email = default(string))
        {
            // to ensure "Username" is required (not null)
            if (Username == null)
            {
                throw new InvalidDataException("Username is a required property for ForgotPasswordDTO and cannot be null");
            }
            else
            {
                this.Username = Username;
            }
            // to ensure "Email" is required (not null)
            if (Email == null)
            {
                throw new InvalidDataException("Email is a required property for ForgotPasswordDTO and cannot be null");
            }
            else
            {
                this.Email = Email;
            }
        }
        
        /// <summary>
        /// The users username.
        /// </summary>
        /// <value>The users username.</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// His email address.
        /// </summary>
        /// <value>His email address.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ForgotPasswordDTO {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ForgotPasswordDTO);
        }

        /// <summary>
        /// Returns true if ForgotPasswordDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ForgotPasswordDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ForgotPasswordDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
