/* 
 * The Giraf REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A Data Transfer Object for the user settings used by the launcher
    /// </summary>
    [DataContract]
    public partial class SettingDTO :  IEquatable<SettingDTO>, IValidatableObject
    {
        /// <summary>
        /// Preferred orientation of device/screen
        /// </summary>
        /// <value>Preferred orientation of device/screen</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrientationEnum
        {
            
            /// <summary>
            /// Enum Portrait for value: portrait
            /// </summary>
            [EnumMember(Value = "portrait")]
            Portrait = 1,
            
            /// <summary>
            /// Enum Landscape for value: landscape
            /// </summary>
            [EnumMember(Value = "landscape")]
            Landscape = 2
        }

        /// <summary>
        /// Preferred orientation of device/screen
        /// </summary>
        /// <value>Preferred orientation of device/screen</value>
        [DataMember(Name="orientation", EmitDefaultValue=false)]
        public OrientationEnum Orientation { get; set; }
        /// <summary>
        /// Preferred appearence of checked resources
        /// </summary>
        /// <value>Preferred appearence of checked resources</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CompleteMarkEnum
        {
            
            /// <summary>
            /// Enum Removed for value: Removed
            /// </summary>
            [EnumMember(Value = "Removed")]
            Removed = 1,
            
            /// <summary>
            /// Enum Checkmark for value: Checkmark
            /// </summary>
            [EnumMember(Value = "Checkmark")]
            Checkmark = 2,
            
            /// <summary>
            /// Enum MovedRight for value: MovedRight
            /// </summary>
            [EnumMember(Value = "MovedRight")]
            MovedRight = 3
        }

        /// <summary>
        /// Preferred appearence of checked resources
        /// </summary>
        /// <value>Preferred appearence of checked resources</value>
        [DataMember(Name="completeMark", EmitDefaultValue=false)]
        public CompleteMarkEnum CompleteMark { get; set; }
        /// <summary>
        /// Preferred appearence of cancelled resources
        /// </summary>
        /// <value>Preferred appearence of cancelled resources</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CancelMarkEnum
        {
            
            /// <summary>
            /// Enum Removed for value: Removed
            /// </summary>
            [EnumMember(Value = "Removed")]
            Removed = 1,
            
            /// <summary>
            /// Enum Cross for value: Cross
            /// </summary>
            [EnumMember(Value = "Cross")]
            Cross = 2
        }

        /// <summary>
        /// Preferred appearence of cancelled resources
        /// </summary>
        /// <value>Preferred appearence of cancelled resources</value>
        [DataMember(Name="cancelMark", EmitDefaultValue=false)]
        public CancelMarkEnum CancelMark { get; set; }
        /// <summary>
        /// Preferred appearence of timer
        /// </summary>
        /// <value>Preferred appearence of timer</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DefaultTimerEnum
        {
            
            /// <summary>
            /// Enum Hourglass for value: hourglass
            /// </summary>
            [EnumMember(Value = "hourglass")]
            Hourglass = 1,
            
            /// <summary>
            /// Enum AnalogClock for value: analogClock
            /// </summary>
            [EnumMember(Value = "analogClock")]
            AnalogClock = 2
        }

        /// <summary>
        /// Preferred appearence of timer
        /// </summary>
        /// <value>Preferred appearence of timer</value>
        [DataMember(Name="defaultTimer", EmitDefaultValue=false)]
        public DefaultTimerEnum DefaultTimer { get; set; }
        /// <summary>
        /// The preferred theme
        /// </summary>
        /// <value>The preferred theme</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ThemeEnum
        {
            
            /// <summary>
            /// Enum GirafYellow for value: girafYellow
            /// </summary>
            [EnumMember(Value = "girafYellow")]
            GirafYellow = 1,
            
            /// <summary>
            /// Enum GirafGreen for value: girafGreen
            /// </summary>
            [EnumMember(Value = "girafGreen")]
            GirafGreen = 2,
            
            /// <summary>
            /// Enum GirafRed for value: girafRed
            /// </summary>
            [EnumMember(Value = "girafRed")]
            GirafRed = 3,
            
            /// <summary>
            /// Enum AndroidBlue for value: androidBlue
            /// </summary>
            [EnumMember(Value = "androidBlue")]
            AndroidBlue = 4
        }

        /// <summary>
        /// The preferred theme
        /// </summary>
        /// <value>The preferred theme</value>
        [DataMember(Name="theme", EmitDefaultValue=false)]
        public ThemeEnum Theme { get; set; }
        /// <summary>
        /// Property for setting the color theme of weekschedules
        /// </summary>
        /// <value>Property for setting the color theme of weekschedules</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ColorThemeWeekSchedulesEnum
        {
            
            /// <summary>
            /// Enum Standard for value: standard
            /// </summary>
            [EnumMember(Value = "standard")]
            Standard = 1,
            
            /// <summary>
            /// Enum YellowAndWhite for value: yellowAndWhite
            /// </summary>
            [EnumMember(Value = "yellowAndWhite")]
            YellowAndWhite = 2
        }

        /// <summary>
        /// Property for setting the color theme of weekschedules
        /// </summary>
        /// <value>Property for setting the color theme of weekschedules</value>
        [DataMember(Name="colorThemeWeekSchedules", EmitDefaultValue=false)]
        public ColorThemeWeekSchedulesEnum ColorThemeWeekSchedules { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SettingDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SettingDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SettingDTO" /> class.
        /// </summary>
        /// <param name="Orientation">Preferred orientation of device/screen (required).</param>
        /// <param name="CompleteMark">Preferred appearence of checked resources (required).</param>
        /// <param name="CancelMark">Preferred appearence of cancelled resources (required).</param>
        /// <param name="DefaultTimer">Preferred appearence of timer (required).</param>
        /// <param name="TimerSeconds">Number of seconds for timer.</param>
        /// <param name="ActivitiesCount">Number of activities.</param>
        /// <param name="Theme">The preferred theme (required).</param>
        /// <param name="ColorThemeWeekSchedules">Property for setting the color theme of weekschedules (required).</param>
        /// <param name="NrOfDaysToDisplay">defines the number of days to display for a user in a weekschedule.</param>
        /// <param name="GreyScale">Flag for indicating whether or not greyscale is enabled.</param>
        /// <param name="WeekDayColors">WeekDayColors.</param>
        public SettingDTO(OrientationEnum Orientation = default(OrientationEnum), CompleteMarkEnum CompleteMark = default(CompleteMarkEnum), CancelMarkEnum CancelMark = default(CancelMarkEnum), DefaultTimerEnum DefaultTimer = default(DefaultTimerEnum), int? TimerSeconds = default(int?), int? ActivitiesCount = default(int?), ThemeEnum Theme = default(ThemeEnum), ColorThemeWeekSchedulesEnum ColorThemeWeekSchedules = default(ColorThemeWeekSchedulesEnum), int? NrOfDaysToDisplay = default(int?), bool? GreyScale = default(bool?), List<WeekDayColorDTO> WeekDayColors = default(List<WeekDayColorDTO>))
        {
            // to ensure "Orientation" is required (not null)
            if (Orientation == null)
            {
                throw new InvalidDataException("Orientation is a required property for SettingDTO and cannot be null");
            }
            else
            {
                this.Orientation = Orientation;
            }
            // to ensure "CompleteMark" is required (not null)
            if (CompleteMark == null)
            {
                throw new InvalidDataException("CompleteMark is a required property for SettingDTO and cannot be null");
            }
            else
            {
                this.CompleteMark = CompleteMark;
            }
            // to ensure "CancelMark" is required (not null)
            if (CancelMark == null)
            {
                throw new InvalidDataException("CancelMark is a required property for SettingDTO and cannot be null");
            }
            else
            {
                this.CancelMark = CancelMark;
            }
            // to ensure "DefaultTimer" is required (not null)
            if (DefaultTimer == null)
            {
                throw new InvalidDataException("DefaultTimer is a required property for SettingDTO and cannot be null");
            }
            else
            {
                this.DefaultTimer = DefaultTimer;
            }
            // to ensure "Theme" is required (not null)
            if (Theme == null)
            {
                throw new InvalidDataException("Theme is a required property for SettingDTO and cannot be null");
            }
            else
            {
                this.Theme = Theme;
            }
            // to ensure "ColorThemeWeekSchedules" is required (not null)
            if (ColorThemeWeekSchedules == null)
            {
                throw new InvalidDataException("ColorThemeWeekSchedules is a required property for SettingDTO and cannot be null");
            }
            else
            {
                this.ColorThemeWeekSchedules = ColorThemeWeekSchedules;
            }
            this.TimerSeconds = TimerSeconds;
            this.ActivitiesCount = ActivitiesCount;
            this.NrOfDaysToDisplay = NrOfDaysToDisplay;
            this.GreyScale = GreyScale;
            this.WeekDayColors = WeekDayColors;
        }
        




        /// <summary>
        /// Number of seconds for timer
        /// </summary>
        /// <value>Number of seconds for timer</value>
        [DataMember(Name="timerSeconds", EmitDefaultValue=false)]
        public int? TimerSeconds { get; set; }

        /// <summary>
        /// Number of activities
        /// </summary>
        /// <value>Number of activities</value>
        [DataMember(Name="activitiesCount", EmitDefaultValue=false)]
        public int? ActivitiesCount { get; set; }



        /// <summary>
        /// defines the number of days to display for a user in a weekschedule
        /// </summary>
        /// <value>defines the number of days to display for a user in a weekschedule</value>
        [DataMember(Name="nrOfDaysToDisplay", EmitDefaultValue=false)]
        public int? NrOfDaysToDisplay { get; set; }

        /// <summary>
        /// Flag for indicating whether or not greyscale is enabled
        /// </summary>
        /// <value>Flag for indicating whether or not greyscale is enabled</value>
        [DataMember(Name="greyScale", EmitDefaultValue=false)]
        public bool? GreyScale { get; set; }

        /// <summary>
        /// Gets or Sets WeekDayColors
        /// </summary>
        [DataMember(Name="weekDayColors", EmitDefaultValue=false)]
        public List<WeekDayColorDTO> WeekDayColors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SettingDTO {\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("  CompleteMark: ").Append(CompleteMark).Append("\n");
            sb.Append("  CancelMark: ").Append(CancelMark).Append("\n");
            sb.Append("  DefaultTimer: ").Append(DefaultTimer).Append("\n");
            sb.Append("  TimerSeconds: ").Append(TimerSeconds).Append("\n");
            sb.Append("  ActivitiesCount: ").Append(ActivitiesCount).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  ColorThemeWeekSchedules: ").Append(ColorThemeWeekSchedules).Append("\n");
            sb.Append("  NrOfDaysToDisplay: ").Append(NrOfDaysToDisplay).Append("\n");
            sb.Append("  GreyScale: ").Append(GreyScale).Append("\n");
            sb.Append("  WeekDayColors: ").Append(WeekDayColors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SettingDTO);
        }

        /// <summary>
        /// Returns true if SettingDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SettingDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettingDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Orientation == input.Orientation ||
                    (this.Orientation != null &&
                    this.Orientation.Equals(input.Orientation))
                ) && 
                (
                    this.CompleteMark == input.CompleteMark ||
                    (this.CompleteMark != null &&
                    this.CompleteMark.Equals(input.CompleteMark))
                ) && 
                (
                    this.CancelMark == input.CancelMark ||
                    (this.CancelMark != null &&
                    this.CancelMark.Equals(input.CancelMark))
                ) && 
                (
                    this.DefaultTimer == input.DefaultTimer ||
                    (this.DefaultTimer != null &&
                    this.DefaultTimer.Equals(input.DefaultTimer))
                ) && 
                (
                    this.TimerSeconds == input.TimerSeconds ||
                    (this.TimerSeconds != null &&
                    this.TimerSeconds.Equals(input.TimerSeconds))
                ) && 
                (
                    this.ActivitiesCount == input.ActivitiesCount ||
                    (this.ActivitiesCount != null &&
                    this.ActivitiesCount.Equals(input.ActivitiesCount))
                ) && 
                (
                    this.Theme == input.Theme ||
                    (this.Theme != null &&
                    this.Theme.Equals(input.Theme))
                ) && 
                (
                    this.ColorThemeWeekSchedules == input.ColorThemeWeekSchedules ||
                    (this.ColorThemeWeekSchedules != null &&
                    this.ColorThemeWeekSchedules.Equals(input.ColorThemeWeekSchedules))
                ) && 
                (
                    this.NrOfDaysToDisplay == input.NrOfDaysToDisplay ||
                    (this.NrOfDaysToDisplay != null &&
                    this.NrOfDaysToDisplay.Equals(input.NrOfDaysToDisplay))
                ) && 
                (
                    this.GreyScale == input.GreyScale ||
                    (this.GreyScale != null &&
                    this.GreyScale.Equals(input.GreyScale))
                ) && 
                (
                    this.WeekDayColors == input.WeekDayColors ||
                    this.WeekDayColors != null &&
                    this.WeekDayColors.SequenceEqual(input.WeekDayColors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Orientation != null)
                    hashCode = hashCode * 59 + this.Orientation.GetHashCode();
                if (this.CompleteMark != null)
                    hashCode = hashCode * 59 + this.CompleteMark.GetHashCode();
                if (this.CancelMark != null)
                    hashCode = hashCode * 59 + this.CancelMark.GetHashCode();
                if (this.DefaultTimer != null)
                    hashCode = hashCode * 59 + this.DefaultTimer.GetHashCode();
                if (this.TimerSeconds != null)
                    hashCode = hashCode * 59 + this.TimerSeconds.GetHashCode();
                if (this.ActivitiesCount != null)
                    hashCode = hashCode * 59 + this.ActivitiesCount.GetHashCode();
                if (this.Theme != null)
                    hashCode = hashCode * 59 + this.Theme.GetHashCode();
                if (this.ColorThemeWeekSchedules != null)
                    hashCode = hashCode * 59 + this.ColorThemeWeekSchedules.GetHashCode();
                if (this.NrOfDaysToDisplay != null)
                    hashCode = hashCode * 59 + this.NrOfDaysToDisplay.GetHashCode();
                if (this.GreyScale != null)
                    hashCode = hashCode * 59 + this.GreyScale.GetHashCode();
                if (this.WeekDayColors != null)
                    hashCode = hashCode * 59 + this.WeekDayColors.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
