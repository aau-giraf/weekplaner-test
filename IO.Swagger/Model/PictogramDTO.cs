/* 
 * The Giraf REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Defines the structure of Pictogram when serializing and deserializing data. Data transfer objects (DTOs)   were introduced in the project due to problems with circular references in the model classes.
    /// </summary>
    [DataContract]
    public partial class PictogramDTO :  IEquatable<PictogramDTO>, IValidatableObject
    {
        /// <summary>
        /// The accesslevel of the pictogram.
        /// </summary>
        /// <value>The accesslevel of the pictogram.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccessLevelEnum
        {
            
            /// <summary>
            /// Enum PUBLIC for value: PUBLIC
            /// </summary>
            [EnumMember(Value = "PUBLIC")]
            PUBLIC = 1,
            
            /// <summary>
            /// Enum PROTECTED for value: PROTECTED
            /// </summary>
            [EnumMember(Value = "PROTECTED")]
            PROTECTED = 2,
            
            /// <summary>
            /// Enum PRIVATE for value: PRIVATE
            /// </summary>
            [EnumMember(Value = "PRIVATE")]
            PRIVATE = 3
        }

        /// <summary>
        /// The accesslevel of the pictogram.
        /// </summary>
        /// <value>The accesslevel of the pictogram.</value>
        [DataMember(Name="accessLevel", EmitDefaultValue=false)]
        public AccessLevelEnum? AccessLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PictogramDTO" /> class.
        /// </summary>
        /// <param name="Title">The title of the pictogram..</param>
        /// <param name="AccessLevel">The accesslevel of the pictogram..</param>
        public PictogramDTO(string Title = default(string), AccessLevelEnum? AccessLevel = default(AccessLevelEnum?))
        {
            this.Title = Title;
            this.AccessLevel = AccessLevel;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; private set; }

        /// <summary>
        /// The last time the pictogram was edited.
        /// </summary>
        /// <value>The last time the pictogram was edited.</value>
        [DataMember(Name="lastEdit", EmitDefaultValue=false)]
        public DateTime? LastEdit { get; private set; }

        /// <summary>
        /// The title of the pictogram.
        /// </summary>
        /// <value>The title of the pictogram.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }


        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name="imageUrl", EmitDefaultValue=false)]
        public string ImageUrl { get; private set; }

        /// <summary>
        /// Gets or Sets ImageHash
        /// </summary>
        [DataMember(Name="imageHash", EmitDefaultValue=false)]
        public string ImageHash { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PictogramDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastEdit: ").Append(LastEdit).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  AccessLevel: ").Append(AccessLevel).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  ImageHash: ").Append(ImageHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PictogramDTO);
        }

        /// <summary>
        /// Returns true if PictogramDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of PictogramDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PictogramDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastEdit == input.LastEdit ||
                    (this.LastEdit != null &&
                    this.LastEdit.Equals(input.LastEdit))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.AccessLevel == input.AccessLevel ||
                    (this.AccessLevel != null &&
                    this.AccessLevel.Equals(input.AccessLevel))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.ImageHash == input.ImageHash ||
                    (this.ImageHash != null &&
                    this.ImageHash.Equals(input.ImageHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LastEdit != null)
                    hashCode = hashCode * 59 + this.LastEdit.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.AccessLevel != null)
                    hashCode = hashCode * 59 + this.AccessLevel.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                if (this.ImageHash != null)
                    hashCode = hashCode * 59 + this.ImageHash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
